{
  "openapi": "3.0.3",
  "info": {
    "title": "Reflect Money API",
    "description": "Interact with the Reflect Money infrastructure via API. Retrieve stablecoin and protocol stats. Generate transactions for minting and redeeming stablecoins. Manage integrations and issue whitelabel stablecoins.\n\n## Rate Limiting\n- **Unauthenticated users**: 100 requests per minute\n- **Authenticated integrators**: 500 requests per minute\n\n## Authentication\nTo access higher rate limits, include your API key in the `X-API-Key` header. API keys can be obtained through the integration management endpoints.",
    "version": "1.0.0",
    "contact": {
      "name": "Reflect Money",
      "url": "https://reflect.money"
    }
  },
  "servers": [
    {
      "url": "https://prod.api.reflect.money",
      "description": "Production environment"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Check if the is operational and healthy.",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "API is operational",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "API is running"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00.000Z"
                    }
                  },
                  "required": ["success", "message", "timestamp"]
                }
              }
            }
          },
          "500": {
            "description": "API is down",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  },
                  "required": ["success", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/integration/initialize": {
      "post": {
        "summary": "Initialize an integration",
        "description": "Initialize a new integration with branded mint and fee configuration.",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "signer": { "type": "string", "description": "Initializer's Solana address" },
                  "authority": { "type": "string", "description": "Authority Solana address" },
                  "stablecoin": { "type": "integer", "enum": [0], "description": "Stablecoin index (0: USDC+)" },
                  "feeBps": { "type": "integer", "minimum": 0, "maximum": 10000, "description": "Fee in basis points" },
                  "brandedMint": { "type": "string", "description": "Branded token mint address" },
                  "feePayer": { "type": "string", "description": "Fee payer Solana address" }
                },
                "required": ["signer", "authority", "stablecoin", "feeBps", "brandedMint", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Initialization transaction generated successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } }
          },
          "400": { "description": "Invalid request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestErrorResponse" } } } },
          "500": { "description": "Internal server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" } } } }
        }
      }
    },
    "/integration/{id}/config": {
      "get": {
        "summary": "Get integration configuration",
        "description": "Retrieve configuration for a specific integration",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid integration ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update integration configuration",
        "description": "Update configuration for a specific integration",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/whitelist": {
      "post": {
        "summary": "Whitelist integration users",
        "description": "Reflect is currently in closed beta and requires whitelisting users. To whitelist your users as integrator, generate and submit transaction returned from this endpoint.",
        "tags": ["Integration"],
        "security": [
          {
            "authenticatedIntegrator": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "signer": {
                    "type": "string",
                    "description": "Signer Solana address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  },
                  "feePayer": {
                    "type": "string",
                    "description": "Fee payer Solana address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  }
                },
                "required": ["signer", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Whitelist transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/{id}/stats": {
      "get": {
        "summary": "Get integration statistics",
        "description": "Retrieve statistics for a specific integration",
        "tags": ["Integration"],
        "security": [
          {
            "authenticatedIntegrator": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid integration ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/{id}/stats/historical": {
      "get": {
        "summary": "Get historical integration statistics",
        "description": "Retrieve historical statistics for a specific integration",
        "tags": ["Integration"],
        "security": [
          {
            "authenticatedIntegrator": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Time period for historical data",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["7d", "30d", "90d", "1y"],
              "default": "30d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Historical integration statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoricalStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid integration ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/{id}/exchange-rate": {
      "get": {
        "summary": "Get current exchange rate",
        "description": "Retrieve current exchange rate for a specific integration",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exchange rate retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid integration ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/initialize-vault": {
      "post": {
        "summary": "Initialize integration vault",
        "description": "Initialize the proxy vault for an integration (admin-only).",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integrationId": { "type": "string", "description": "Integration ID (proxy state address)" },
                  "signer": { "type": "string", "description": "Admin Solana address" },
                  "feePayer": { "type": "string", "description": "Fee payer Solana address" }
                },
                "required": ["integrationId", "signer", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Initialize vault transaction generated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "400": { "description": "Invalid request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestErrorResponse" } } } },
          "500": { "description": "Internal server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" } } } }
        }
      }
    },
    "/integration/initialize-user-account": {
      "post": {
        "summary": "Initialize user branded token account",
        "description": "Generate a transaction to initialize a user's branded token account.",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integrationId": { "type": "string", "description": "Integration ID (proxy state address)" },
                  "userAddress": { "type": "string", "description": "User's Solana address" },
                  "signer": { "type": "string", "description": "Signer Solana address" },
                  "feePayer": { "type": "string", "description": "Fee payer Solana address" }
                },
                "required": ["integrationId", "userAddress", "signer", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Initialize user account transaction generated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "400": { "description": "Invalid request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestErrorResponse" } } } },
          "500": { "description": "Internal server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" } } } }
        }
      }
    },
    "/integration/mint": {
      "post": {
        "summary": "Generate mint transaction",
        "description": "Generate a mint transaction for integration stablecoins.",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount to mint",
                    "example": 1000000
                  },
                  "recipient": {
                    "type": "string",
                    "description": "Recipient Solana wallet address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  },
                  "integrationId": {
                    "type": "string",
                    "description": "Integration ID",
                    "example": "int_12345"
                  },
                  "feePayer": {
                    "type": "string",
                    "description": "Fee payer Solana address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  }
                },
                "required": ["amount", "recipient", "integrationId", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mint transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/flow/mint": {
      "post": {
        "summary": "Mint stablecoin and whitelabel in single transaction",
        "description": "Generate a combined transaction that mints the underlying stablecoin and then whitelabels it in a single call. This combines the functionality of /stablecoin/mint and /integration/mint.",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount to mint",
                    "example": 1000000
                  },
                  "recipient": {
                    "type": "string",
                    "description": "Recipient Solana wallet address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  },
                  "integrationId": {
                    "type": "string",
                    "description": "Integration ID (proxy state address)",
                    "example": "int_12345"
                  },
                  "feePayer": {
                    "type": "string",
                    "description": "Fee payer Solana address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  }
                },
                "required": ["amount", "recipient", "integrationId", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Combined mint and whitelabel transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/redeem": {
      "post": {
        "summary": "Generate redemption transaction",
        "description": "Generate a redemption transaction for integration stablecoins",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount to redeem",
                    "example": 1000000
                  },
                  "redeemer": {
                    "type": "string",
                    "description": "Redeemer Solana wallet address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  },
                  "integrationId": {
                    "type": "string",
                    "description": "Integration ID",
                    "example": "int_12345"
                  },
                  "feePayer": {
                    "type": "string",
                    "description": "Fee payer Solana address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  }
                },
                "required": ["amount", "redeemer", "integrationId", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redemption transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/flow/redeem": {
      "post": {
        "summary": "Redeem whitelabeled stablecoin in single transaction",
        "description": "Generate a combined transaction that redeems the whitelabeled stablecoin and burns the underlying stablecoin in a single call. This combines the functionality of /integration/redeem and /stablecoin/burn.",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount to redeem",
                    "example": 1000000
                  },
                  "recipient": {
                    "type": "string",
                    "description": "Recipient Solana wallet address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  },
                  "integrationId": {
                    "type": "string",
                    "description": "Integration ID (proxy state address)",
                    "example": "int_12345"
                  },
                  "feePayer": {
                    "type": "string",
                    "description": "Fee payer Solana address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  }
                },
                "required": ["amount", "recipient", "integrationId", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Combined redeem and burn transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/claim": {
      "post": {
        "summary": "Generate claim transaction",
        "description": "Generate a claim transaction for integration rewards",
        "tags": ["Integration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount to claim",
                    "example": 1000000
                  },
                  "integrationId": {
                    "type": "string",
                    "description": "Integration ID",
                    "example": "int_12345"
                  },
                  "feePayer": {
                    "type": "string",
                    "description": "Fee payer Solana address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  }
                },
                "required": ["amount", "integrationId", "feePayer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Claim transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/types": {
      "get": {
        "summary": "Get available stablecoin types",
        "description": "Retrieve list of available stablecoin types",
        "tags": ["Stablecoin"],
        "responses": {
          "200": {
            "description": "Available stablecoin types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "Stablecoin index",
                            "example": 0
                          },
                          "name": {
                            "type": "string",
                            "description": "Stablecoin name",
                            "example": "USDC+"
                          }
                        },
                        "required": ["index", "name"]
                      },
                      "example": [
                        { "index": 0, "name": "USDC+" }
                      ]
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/limits": {
      "get": {
        "summary": "Get supply cap information for all stablecoins",
        "description": "Retrieve supply caps, current supply, and remaining capacity for all stablecoins",
        "tags": ["Stablecoin"],
        "responses": {
          "200": {
            "description": "Supply cap information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "index": {
                                "type": "integer",
                                "description": "Stablecoin index",
                                "example": 0
                              }
                            },
                            "required": ["index"]
                          },
                          {
                            "$ref": "#/components/schemas/SupplyCapInfo"
                          }
                        ]
                      },
                      "example": [
                        {
                          "index": 0,
                          "supplyCap": 1000000000,
                          "currentSupply": 500000000,
                          "remainingCapacity": 500000000,
                          "utilizationPercentage": 50.0
                        }
                      ]
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/quote/{type}": {
      "post": {
        "summary": "Get quote for mint or redeem",
        "description": "Get a quote for minting or redeeming stablecoins",
        "tags": ["Stablecoin"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Quote type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["mint", "redeem"]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stablecoinIndex": {
                    "type": "integer",
                    "description": "Stablecoin index (0: USDC+)",
                    "enum": [0],
                    "example": 0
                  },
                  "depositAmount": {
                    "type": "number",
                    "description": "Amount to quote",
                    "example": 1000000
                  }
                },
                "required": ["stablecoinIndex", "depositAmount"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "number",
                      "description": "Quote amount",
                      "example": 999000
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Stablecoin with the specified index not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/mint": {
      "post": {
        "summary": "Generate mint transaction",
        "description": "Generate a mint transaction for stablecoins using the Reflect Money SDK.",
        "tags": ["Stablecoin"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stablecoinIndex": {
                    "type": "integer",
                    "description": "Stablecoin index (0: USDC+)",
                    "enum": [0],
                    "example": 0
                  },
                  "depositAmount": {
                    "type": "number",
                    "description": "Amount to mint in smallest unit",
                    "example": 1000000
                  },
                  "signer": {
                    "type": "string",
                    "description": "User's Solana wallet address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  },
                  "minimumReceived": {
                    "type": "number",
                    "description": "Minimum amount to receive (slippage protection)",
                    "example": 999000
                  },
                  "collateralMint": {
                    "type": "string",
                    "description": "Optional collateral mint address",
                    "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
                  }
                },
                "required": ["stablecoinIndex", "depositAmount", "signer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mint transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Stablecoin with the specified index not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/burn": {
      "post": {
        "summary": "Generate burn transaction",
        "description": "Generate a burn transaction for stablecoins using the Reflect Money SDK",
        "tags": ["Stablecoin"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stablecoinIndex": {
                    "type": "integer",
                    "description": "Stablecoin index (0: USDC+)",
                    "enum": [0],
                    "example": 0
                  },
                  "depositAmount": {
                    "type": "number",
                    "description": "Amount to burn in smallest unit",
                    "example": 1000000
                  },
                  "signer": {
                    "type": "string",
                    "description": "User's Solana wallet address",
                    "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  },
                  "minimumReceived": {
                    "type": "number",
                    "description": "Minimum amount to receive (slippage protection)",
                    "example": 999000
                  },
                  "collateralMint": {
                    "type": "string",
                    "description": "Optional collateral mint address",
                    "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
                  }
                },
                "required": ["stablecoinIndex", "depositAmount", "signer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Burn transaction generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Stablecoin with the specified index not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stats": {
      "get": {
        "summary": "Get protocol statistics",
        "description": "Retrieve overall protocol statistics",
        "tags": ["Stats"],
        "responses": {
          "200": {
            "description": "Protocol statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "integer",
                          "description": "Total number of users/holders",
                          "example": 1250
                        },
                        "supply": {
                          "type": "string",
                          "description": "Total supply as string",
                          "example": "50000000000000"
                        },
                        "cumulativeVolume": {
                          "type": "string",
                          "description": "Cumulative volume as string",
                          "example": "100000000000000"
                        },
                        "tvl": {
                          "type": "number",
                          "description": "Total Value Locked in USD",
                          "example": 50000000
                        },
                        "totalYieldDistributed": {
                          "type": "number",
                          "description": "Total yield distributed to users",
                          "example": 2500000
                        }
                      },
                      "required": ["users", "supply", "cumulativeVolume", "tvl", "totalYieldDistributed"]
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/apy": {
      "get": {
        "summary": "Get APY for all stablecoins",
        "description": "Retrieve realtime APY data for all available stablecoins.",
        "tags": ["Stablecoin"],
        "responses": {
          "200": {
            "description": "Successfully retrieved APY data for all stablecoins",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllStablecoinsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No APY data found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/exchange-rates": {
      "get": {
        "summary": "Get latest exchange rates for all stablecoins",
        "description": "Retrieve the latest base and receipt exchange rates for all supported stablecoins (USDC+).",
        "tags": ["Stablecoin"],
        "responses": {
          "200": {
            "description": "Latest exchange rates for all stablecoins retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "stablecoin": { "type": "integer", "enum": [0] },
                          "base_usd_value_bps": { "type": "number", "description": "Base exchange rate in bps" },
                          "receipt_usd_value_bps": { "type": "number", "description": "Receipt exchange rate in bps" },
                          "timestamp": { "type": "string", "format": "date-time" }
                        },
                        "required": ["id", "stablecoin", "base_usd_value_bps", "receipt_usd_value_bps", "timestamp"]
                      }
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/stablecoin/exchange-rates/historical": {
      "get": {
        "summary": "Get historical exchange rates for a stablecoin",
        "description": "Retrieve historical base and receipt exchange rates for a specific stablecoin (0: USDC+) and a number of days.",
        "tags": ["Stablecoin"],
        "parameters": [
          {
            "name": "stablecoin",
            "in": "query",
            "description": "Stablecoin index (0: USDC+)",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [0]
            }
          },
          {
            "name": "days",
            "in": "query",
            "description": "Number of days for historical data (default: 365)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 365
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Historical exchange rates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "stablecoin": { "type": "integer", "enum": [0] },
                          "base_usd_value_bps": { "type": "number", "description": "Base exchange rate in bps" },
                          "receipt_usd_value_bps": { "type": "number", "description": "Receipt exchange rate in bps" },
                          "timestamp": { "type": "string", "format": "date-time" }
                        },
                        "required": ["id", "stablecoin", "base_usd_value_bps", "receipt_usd_value_bps", "timestamp"]
                      }
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Stablecoin with the specified index not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/stablecoin/{index}/apy": {
      "get": {
        "summary": "Get APY for specific stablecoin",
        "description": "Retrieve APY data for a specific stablecoin (realtime data).",
        "tags": ["Stablecoin"],
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "Stablecoin index (0: USDC+)",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [0]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved APY data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsdcApyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid stablecoin index parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No APY data found for the specified stablecoin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/{index}/apy/historical": {
      "get": {
        "summary": "Get historical APY data for specific stablecoin",
        "description": "Retrieve historical APY data for a specific stablecoin over a specified number of days.",
        "tags": ["Stablecoin"],
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "Stablecoin index (0: USDC+)",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [0]
            }
          },
          {
            "name": "days",
            "in": "query",
            "description": "Number of days for historical data (default: 365)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 365
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved historical APY data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsdcApyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid stablecoin index parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stablecoin/{index}/exchange-rate": {
      "get": {
        "summary": "Get realtime exchange rate for a stablecoin",
        "description": "Retrieve the current exchange rate for the specified stablecoin.",
        "tags": ["Stablecoin"],
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "Stablecoin index (0: USDC+)",
            "required": true,
            "schema": { "type": "integer", "enum": [0] }
          }
        ],
        "responses": {
          "200": {
            "description": "Realtime exchange rate retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": { "type": "object", "additionalProperties": true }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid stablecoin index",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestErrorResponse" } }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" } }
            }
          }
        }
      }
    },
    "/events/all/{limit}": {
      "get": {
        "summary": "Get recent events",
        "description": "Retrieve the most recent protocol events up to a limit.",
        "tags": ["Events"],
        "parameters": [
          { "name": "limit", "in": "path", "required": true, "schema": { "type": "integer" }, "description": "Max events to return" }
        ],
        "responses": {
          "200": {
            "description": "Events retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "events": { "type": "array", "items": { "type": "object", "additionalProperties": true } }
                  },
                  "required": ["success", "events"]
                }
              }
            }
          },
          "500": { "description": "Internal server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" } } } }
        }
      }
    },
    "/events/{signer}": {
      "get": {
        "summary": "Get events by signer",
        "description": "Retrieve protocol events associated with a signer address.",
        "tags": ["Events"],
        "parameters": [
          { "name": "signer", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Signer Solana address" }
        ],
        "responses": {
          "200": {
            "description": "Events retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "events": { "type": "array", "items": { "type": "object", "additionalProperties": true } }
                  },
                  "required": ["success", "events"]
                }
              }
            }
          },
          "400": { "description": "Invalid signer address", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestErrorResponse" } } } },
          "500": { "description": "Internal server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorResponse" } } } }
        }
      }
    },
    "/stats/historical": {
      "get": {
        "summary": "Get historical TVL and volume data",
        "description": "Retrieve historical Total Value Locked (TVL) and volume data. By default returns last 7 days of data, customise by using the `period` parameter (in days).",
        "tags": ["Stats"],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "description": "Number of days of historical data to retrieve (default: 7)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 7,
              "example": 7
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Historical data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tvl": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp of the TVL data point",
                                "example": "2024-01-01T12:00:00.000Z"
                              },
                              "tvl": {
                                "type": "integer",
                                "description": "Total Value Locked amount in USD",
                                "example": 50000000
                              }
                            },
                            "required": ["timestamp", "tvl"]
                          },
                          "description": "Historical TVL data points"
                        },
                        "volume": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "type": "string",
                                "format": "date",
                                "description": "Date of the volume data point",
                                "example": "2024-01-01"
                              },
                              "volume": {
                                "type": "string",
                                "description": "24-hour volume in USD (BigInt as string)",
                                "example": "1000000000000"
                              },
                              "cumulativeVolume": {
                                "type": "string",
                                "description": "Cumulative volume in USD (BigInt as string)",
                                "example": "50000000000000"
                              }
                            },
                            "required": ["date", "volume", "cumulativeVolume"]
                          },
                          "description": "Historical volume data points"
                        }
                      },
                      "required": ["tvl", "volume"]
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "authenticatedIntegrator": {
        "type": "apiKey",
        "in": "header",
        "name": "Reflect-API-Key",
        "description": "API key for integrators to access integration-specific endpoints."
      }
    },
    "schemas": {
      "BaseResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful"
          }
        },
        "required": ["success"]
      },
      "BadRequestErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong with the request",
            "example": "Invalid request data: depositAmount must be positive"
          }
        },
        "required": ["success", "message"]
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Error message describing the server error",
            "example": "Internal server error"
          }
        },
        "required": ["success", "message"]
      },
      "UsdcApyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/UsdcApyData"
              }
            },
            "required": ["data"]
          }
        ]
      },
      "UsdcApyData": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Stablecoin index (0: USDC+)",
            "example": 0
          },
          "apy": {
            "type": "number",
            "description": "APY as a number",
            "example": 5.25
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the data point"
          }
        },
        "required": ["index", "apy", "timestamp"]
      },
      "AllStablecoinsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UsdcApyData"
                },
                "description": "Array of stablecoin APY data"
              }
            },
            "required": ["data"]
          }
        ]
      },
      "TransactionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "transaction": {
                    "type": "string",
                    "description": "Base64 encoded transaction",
                    "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAED..."
                  }
                },
                "required": ["transaction"]
              }
            },
            "required": ["data"]
          }
        ]
      },
      "SupplyCapInfo": {
        "type": "object",
        "properties": {
          "supplyCap": {
            "type": "integer",
            "description": "Total supply cap in smallest units",
            "example": 1000000000
          },
          "currentSupply": {
            "type": "integer",
            "description": "Current supply in smallest units",
            "example": 500000000
          },
          "remainingCapacity": {
            "type": "integer",
            "description": "Remaining capacity before hitting cap",
            "example": 500000000
          },
          "utilizationPercentage": {
            "type": "number",
            "format": "float",
            "description": "Percentage of cap currently utilized",
            "example": 50.0
          }
        },
        "required": ["supplyCap", "currentSupply", "remainingCapacity", "utilizationPercentage"]
      },
      "ApiKeyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Generated API key",
                    "example": "sk_live_1234567890abcdef"
                  },
                  "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Expiration timestamp",
                    "example": "2024-12-31T23:59:59.000Z"
                  }
                },
                "required": ["apiKey", "expiresAt"]
              }
            },
            "required": ["data"]
          }
        ]
      },
      "IntegrationStatsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "totalSupply": {
                    "type": "number",
                    "description": "Total supply of integration stablecoins",
                    "example": 1000000000
                  },
                  "totalUsers": {
                    "type": "number",
                    "description": "Total number of users",
                    "example": 1500
                  },
                  "totalPrincipal": {
                    "type": "number",
                    "description": "Total principal amount",
                    "example": 950000000
                  },
                  "totalYieldGenerated": {
                    "type": "number",
                    "description": "Total yield generated",
                    "example": 50000000
                  },
                  "historicalData": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date",
                          "example": "2024-01-01"
                        },
                        "supply": {
                          "type": "number",
                          "example": 1000000000
                        },
                        "users": {
                          "type": "number",
                          "example": 1500
                        },
                        "principal": {
                          "type": "number",
                          "example": 950000000
                        },
                        "yield": {
                          "type": "number",
                          "example": 50000000
                        }
                      },
                      "required": ["date", "supply", "users", "principal", "yield"]
                    }
                  }
                },
                "required": ["totalSupply", "totalUsers", "totalPrincipal", "totalYieldGenerated", "historicalData"]
              }
            },
            "required": ["data"]
          }
        ]
      },
      "HistoricalStatsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "period": {
                    "type": "string",
                    "enum": ["7d", "30d", "90d", "1y"],
                    "example": "30d"
                  },
                  "historicalData": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date",
                          "example": "2024-01-01"
                        },
                        "supply": {
                          "type": "number",
                          "example": 1000000000
                        },
                        "users": {
                          "type": "number",
                          "example": 1500
                        },
                        "principal": {
                          "type": "number",
                          "example": 950000000
                        },
                        "yield": {
                          "type": "number",
                          "example": 50000000
                        }
                      },
                      "required": ["date", "supply", "users", "principal", "yield"]
                    }
                  }
                },
                "required": ["period", "historicalData"]
              }
            },
            "required": ["data"]
          }
        ]
      },
      "IntegrationConfigResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["mint", "redeem", "claim"]
                  },
                  "administrators": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicKey": {
                          "type": "string",
                          "description": "Administrator's Solana public key",
                          "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                        },
                        "permissionLevel": {
                          "type": "string",
                          "enum": ["superadmin", "manager", "viewer"],
                          "example": "superadmin"
                        }
                      },
                      "required": ["publicKey", "permissionLevel"]
                    }
                  },
                  "yieldBreakdownBps": {
                    "type": "object",
                    "properties": {
                      "integrator": {
                        "type": "number",
                        "description": "Integrator's share in basis points",
                        "example": 200
                      },
                      "user": {
                        "type": "number",
                        "description": "User's share in basis points",
                        "example": 9800
                      }
                    },
                    "required": ["integrator", "user"]
                  },
                  "underlyingStablecoin": {
                    "type": "string",
                    "description": "Underlying stablecoin address",
                    "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
                  },
                  "integrationIndex": {
                    "type": "number",
                    "description": "Integration index",
                    "example": 1
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "My Integration"
                      },
                      "symbol": {
                        "type": "string",
                        "example": "MI"
                      },
                      "description": {
                        "type": "string",
                        "example": "A custom integration stablecoin"
                      },
                      "logoUrl": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://example.com/logo.png"
                      },
                      "websiteUrl": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://example.com"
                      }
                    },
                    "required": ["name", "symbol", "description"]
                  }
                },
                "required": ["permissions", "administrators", "yieldBreakdownBps", "underlyingStablecoin", "integrationIndex", "metadata"]
              }
            },
            "required": ["data"]
          }
        ]
      },
      "UpdateConfigRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions",
            "example": ["mint", "redeem", "claim"]
          },
          "administrators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "publicKey": {
                  "type": "string",
                  "description": "Administrator's Solana public key",
                  "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                },
                "permissionLevel": {
                  "type": "string",
                  "enum": ["superadmin", "manager", "viewer"],
                  "example": "superadmin"
                }
              },
              "required": ["publicKey", "permissionLevel"]
            }
          },
          "yieldBreakdownBps": {
            "type": "object",
            "properties": {
              "integrator": {
                "type": "number",
                "description": "Integrator's share in basis points (0-10000)",
                "minimum": 0,
                "maximum": 10000,
                "example": 200
              },
              "user": {
                "type": "number",
                "description": "User's share in basis points (0-10000)",
                "minimum": 0,
                "maximum": 10000,
                "example": 9800
              }
            },
            "description": "Yield breakdown in basis points (must sum to 10000)"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Integration name"
              },
              "symbol": {
                "type": "string",
                "description": "Integration symbol"
              },
              "description": {
                "type": "string",
                "description": "Integration description"
              },
              "logoUrl": {
                "type": "string",
                "format": "uri",
                "description": "Logo URL"
              },
              "websiteUrl": {
                "type": "string",
                "format": "uri",
                "description": "Website URL"
              }
            }
          }
        }
      },
      "ExchangeRateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "integrationId": {
                    "type": "string",
                    "description": "Integration ID",
                    "example": "int_12345"
                  },
                  "underlyingStablecoin": {
                    "type": "string",
                    "description": "Underlying stablecoin address",
                    "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
                  },
                  "rateToUnderlying": {
                    "type": "number",
                    "description": "Rate of integration stablecoin to underlying stablecoin",
                    "example": 1.02
                  },
                  "rateToUsd": {
                    "type": "number",
                    "description": "Rate of underlying stablecoin to USD",
                    "example": 1.0
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of the exchange rate",
                    "example": "2024-01-01T00:00:00.000Z"
                  }
                },
                "required": ["integrationId", "underlyingStablecoin", "rateToUnderlying", "rateToUsd", "timestamp"]
              }
            },
            "required": ["data"]
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Health check endpoints"
    },
    {
      "name": "Stablecoin",
      "description": "Reflect stablecoins interaction endpoints."
    },
    {
      "name": "Integration",
      "description": "Custom integration management endpoints."
    },
    {
      "name": "Stats",
      "description": "Protocol statistics endpoints"
    },
    {
      "name": "Events",
      "description": "Protocol events endpoints"
    }
  ]
}